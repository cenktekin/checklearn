# Chess Endgame Training – Development Rules

This project is a web-based chess endgame training application with structured practice positions.  
Goals: **Rapid visual progress**, **AI token efficiency**, and **tasks.md maintenance**.

---

## Core Principles

1. **Small and visible steps**  
   - Every change should provide visible progress to users.  
   - Priority: Board interaction, position solving, UI responsiveness, progress tracking.

2. **tasks.md discipline**  
   - Mark completed tasks after each development session.  
   - Add new ideas as tasks immediately (no forgetting).

3. **Efficient AI usage**  
   - Clear, targeted prompts instead of lengthy explanations.  
   - Single-shot instructions toward specific goals.

---

## Technical Quick Guide

- **Stack**: TypeScript, Vite, Alpine.js, Ionic Framework + WASM engines (Stockfish 16 NNUE, Syzygy tablebases).
- **Architecture**: MVC pattern with controllers, services, and models. Event-driven with engine isolation.
- **Deployment**: PWA-ready, static hosting compatible, Google Drive sync.

---

## Development Workflow

1. **Plan** → Write the goal in one sentence.  
2. **Develop** → Minimal changes, focused implementation.  
3. **Test** → Position loading, move validation, engine responses, progress saving.  
4. **Update tasks.md** → Mark completed + add new ideas.

---

## Safe Change Principles

- Public API/service interface removal → requires approval.  
- Experimental features → use feature flags, default disabled.  
- Engine behavior or network changes → requires approval.
- i18n changes → maintain consistency across all languages (en, es, ru).

---

## Performance and UX

- Use `requestAnimationFrame` for board animations.
- Reduce engine depth/time on low-resource devices.
- Lazy load position databases and piece themes.
- Cache Syzygy responses to minimize API calls.

---

## Chess-Specific Considerations

- Always validate moves through chess.js before engine submission.
- Maintain FEN accuracy for position sharing and analysis.
- Preserve game state during navigation and settings changes.
- Handle engine timeouts gracefully with fallback options.

---

## Quick Checklist

- [ ] Visual progress clear?  
- [ ] tasks.md updated?  
- [ ] AI token usage minimal?  
- [ ] Position solving cycle working?  
- [ ] Progress tracking functional?  
- [ ] Multi-language support maintained?

---

## Geliştirme Kuralları

### 1. Geliştirme Süreç Akışı

#### Sabah Başlangıç Rutini
1. **Proje Durum Tespiti**: `.kiro/commands/project-assessment.md` ile son durumu al
   - Test sonuçlarını kontrol et
   - Aktif task'ları incele
   - Kritik sorunları tespit et

2. **Sıradaki Task Belirleme**: `.kiro/commands/next-task-determination.md` ile çalışılacak task'ı seç
   - Öncelikleri değerlendir
   - Kullanıcı etkisini analiz et
   - Teknik hazırlığı kontrol et

3. **Task Detaylandırma**: `.kiro/commands/task-breakdown.md` ile task'ı alt task'lara böl
   - Yönetilebilir alt task'lar oluştur
   - Bağımlılıkları belirle
   - Başarı kriterlerini tanımla

4. **tasks.md Güncelleme**: Alt task'ları tasks.md dosyasına ekle
   - Task durumlarını güncelle
   - Yeni task'ları ekle
   - Açıklamaları güncelle

#### Kodlama Çalışmaları
1. **Atomic Change Uygulaması**: `.kiro/commands/atomic-change.md` ile değişiklikleri yap
   - Tek bir odak noktası
   - Küçük ve kontrollü adımlar
   - Mevcut işlevselliği koru

2. **Test ve Doğrulama**: `.kiro/commands/testing-strategy.md` ile testleri yap
   - Çekirdek işlevselliği test et
   - Motor entegrasyonunu kontrol et
   - Kullanıcı deneyimini doğrula

3. **Güvenli Commit**: `.kiro/commands/safe-commit-push.md` ile değişiklikleri kaydet
   - Önce test yap
   - Açıklayıcı commit mesajı
   - Dokümantasyonu güncelle

### 2. Test Zorunluluğu
- Her kod değişikliğinden sonra uygulamanın çalışıp çalışmadığını test et
- Position loading, move validation, engine responses, progress saving testlerini yap
- Test başarısızsa değişikliği geri al

### 3. tasks.md Zorunluluğu
- Her geliştirme oturumundan sonra completed task'ları işaretle
- Yeni fikirleri hemen task olarak ekle (unutma)
- Task'ların durumunu her zaman güncel tut

### 4. Küçük ve Kontrollü Değişiklikler
- Her değişiklikten önce backup al
- Sadece bir task odaklı çalış
- Değişiklikleri küçük adımlara böl

### 5. Hata Durumunda Geri Dönme
- Uygulama bozulursa son başarılı duruma geri dön
- Her değişiklikten önce git commit at
- Hata durumunda hızlı geri dönüş imkanı sağla

### 6. Test ve Doğrulama Kuralları
- Position controller'ın çalıştığını doğrula
- Animasyonların bozulmadığını kontrol et
- Mobil cihazlarda test et
- Alpine.js entegrasyonunun doğru çalıştığını kontrol et

### 7. Süreç Takibi
- Her task sonunda durumu güncelle
- Yeni keşfedilen sorunları task olarak ekle
- Token verimliliğini gözlemle
- Görsel ilerlemeyi her zaman kontrol et